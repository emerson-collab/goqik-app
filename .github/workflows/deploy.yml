name: Deploy GoQik (SSOT via Secrets)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_DIR: /root/goqik
  PORT: 8080
  NODE_VERSION: 18

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # 注意：这里不再使用 cache: 'npm'，避免没有 lock 文件时报错

      - name: Install & Build (optional)
        run: |
          if [ -f package-lock.json ]; then
            echo "[i] use npm ci (lock file exists)"
            npm ci
          else
            echo "[i] lock file not found, fallback to npm install"
            npm install
          fi
          npm run build || true

      - name: Upload workspace to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          source: .
          target: ${{ env.APP_DIR }}
          rm: true
          overwrite: true
          strip_components: 0
          timeout: 180s

      - name: Remote deploy & health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail
            APPDIR="${APP_DIR}"
            cd "$APPDIR"

            # Ensure pm2
            if ! command -v pm2 >/dev/null 2>&1; then
              npm i -g pm2
            fi

            # Install prod deps if missing (server side)
            if [ ! -d node_modules ]; then
              npm ci --omit=dev || npm i --omit=dev
            fi

            # === Write .env from Secrets (SSOT) ===
            {
              echo "PORT=${PORT}"
              echo "NODE_ENV=production"
              echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
              if [ -n "${{ secrets.ADMIN_TOKEN || '' }}" ]; then
                echo "ADMIN_TOKEN=${{ secrets.ADMIN_TOKEN }}"
              fi
            } > "$APPDIR/.env"
            chmod 600 "$APPDIR/.env"

            # === Start/Restart app ===
            if compgen -G "ecosystem.config.*" > /dev/null; then
              pm2 start ecosystem.config.* --only goqik 2>/dev/null || true
              pm2 restart goqik --update-env || true
            elif [ -f src/index.js ]; then
              pm2 describe goqik >/dev/null 2>&1 \
                && pm2 restart goqik --update-env \
                || PORT=${PORT} pm2 start src/index.js --name goqik --update-env
            else
              echo "[!] src/index.js 或 ecosystem.config.* 未找到"; exit 2
            fi

            pm2 save || true

            # === Health check ===
            for i in {1..30}; do
              if curl -fsS "http://127.0.0.1:${PORT}/readyz" >/dev/null; then
                echo "READY"; exit 0
              fi
              sleep 2
            done

            echo "[!] Backend not ready; recent logs:"
            pm2 logs --lines 150 goqik
            exit 1

  rollback-placeholder:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: failure()
    env:
      APP_DIR: /root/goqik
      PORT: 8080
    steps:
      - name: Roll back to placeholder (keep site up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail
            APPDIR="${APP_DIR}"
            mkdir -p "$APPDIR"
            cd "$APPDIR"

            # Start placeholder on PORT via pm2 (no Nginx changes)
            pm2 delete goqik >/dev/null 2>&1 || true
            PORT=${PORT} pm2 start node --name goqik -- -e '
              const http=require("http");
              const p=process.env.PORT||8080;
              const html="<!doctype html><meta charset=utf-8><title>GoQik</title><style>body{font-family:sans-serif;margin:2rem}</style><h1>GoQik v0.993 Placeholder</h1><p>Backend is up on port "+p+". Replace with real app when ready.</p >";
              http.createServer((req,res)=>{
                if(req.url==="/readyz"){res.writeHead(200,{"Content-Type":"application/json"});res.end(JSON.stringify({ok:true,app:"GoQik placeholder"}));return;}
                if(req.url.startsWith("/ui")||req.url.startsWith("/admin-shadow")||req.url==="/"){
                  res.writeHead(200,{"Content-Type":"text/html; charset=utf-8"});res.end(html);return;
                }
                res.writeHead(404);res.end("Not found");
              }).listen(p,"0.0.0.0",()=>console.log("placeholder listening",p));
            '
            pm2 save || true

            # Health check for placeholder
            for i in {1..20}; do
              curl -fsS "http://127.0.0.1:${PORT}/readyz" && echo "PLACEHOLDER READY" && exit 0 || sleep 2
            done
            echo "[!] placeholder failed to start"; pm2 logs --lines 120 goqik; exit 1
