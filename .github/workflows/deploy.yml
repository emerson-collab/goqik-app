name: Deploy GoQik (SSOT via Secrets)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_DIR: /root/goqik
  PORT: 8080
  NODE_VERSION: 18

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install & Build (optional)
        run: |
          if [ -f package-lock.json ]; then
            echo "[i] use npm ci (lock file exists)"; npm ci
          else
            echo "[i] lock file not found, fallback to npm install"; npm install
          fi
          npm run build || true

      - name: Upload workspace to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          source: .
          target: ${{ env.APP_DIR }}
          rm: true
          overwrite: true
          strip_components: 0
          timeout: 180s

      - name: Remote deploy & health check (no hardcoded DB)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          script: |
            set -euo pipefail
            APPDIR="${APP_DIR}"
            PORT="${PORT}"
            SECDIR="/root/.secrets"
            ENVFILE="$APPDIR/.env"

            # Ensure Node & PM2
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - && apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              npm i -g pm2
            fi

            # --- Resolve DATABASE_URL (Priority: GH Secret -> /root/.secrets -> existing .env) ---
            DB_URL="${{ secrets.DATABASE_URL }}"
            if [ -z "$DB_URL" ] && [ -f "$SECDIR/DATABASE_URL" ]; then
              DB_URL="$(sed -n '1p' "$SECDIR/DATABASE_URL" | tr -d '\r')"
            fi
            if [ -z "$DB_URL" ] && [ -f "$ENVFILE" ]; then
              DB_URL="$(grep -E '^DATABASE_URL=' "$ENVFILE" | sed 's/^DATABASE_URL=//' | tr -d '\r')"
            fi
            if [ -z "$DB_URL" ]; then
              echo '[!] DATABASE_URL 未提供。请在 GitHub Secrets 或 /root/.secrets/DATABASE_URL 配置。'; exit 2
            fi

            # --- Write/merge .env (no hardcode) ---
            mkdir -p "$APPDIR"; touch "$ENVFILE"; sed -i 's/\r$//' "$ENVFILE" || true
            PORT_LINE="PORT=${PORT}"
            HOST_LINE="HOST=0.0.0.0"
            NODE_ENV_LINE="NODE_ENV=production"

            grep -q '^PORT=' "$ENVFILE"      && sed -i "s#^PORT=.*#$PORT_LINE#" "$ENVFILE"      || echo "$PORT_LINE" >> "$ENVFILE"
            grep -q '^HOST=' "$ENVFILE"      && sed -i "s#^HOST=.*#$HOST_LINE#" "$ENVFILE"      || echo "$HOST_LINE" >> "$ENVFILE"
            grep -q '^NODE_ENV=' "$ENVFILE"  && sed -i "s#^NODE_ENV=.*#$NODE_ENV_LINE#" "$ENVFILE" || echo "$NODE_ENV_LINE" >> "$ENVFILE"
            if grep -q '^DATABASE_URL=' "$ENVFILE"; then
              sed -i "s#^DATABASE_URL=.*#DATABASE_URL=$DB_URL#" "$ENVFILE"
            else
              echo "DATABASE_URL=$DB_URL" >> "$ENVFILE"
            fi
            chmod 600 "$ENVFILE"

            # Export .env so pm2 inherits env
            set -a; . "$ENVFILE"; set +a

            # Ensure ESM if server.js uses import
            if [ -f "$APPDIR/package.json" ] && ! grep -q '"type"[[:space:]]*:[[:space:]]*"module"' "$APPDIR/package.json"; then
              cp "$APPDIR/package.json" "$APPDIR/package.json.bak.$(date +%s)"
              node -e "let fs=require('fs');let p=JSON.parse(fs.readFileSync('$APPDIR/package.json','utf8')); p.type=p.type||'module'; fs.writeFileSync('$APPDIR/package.json', JSON.stringify(p,null,2)); console.log('[fix] add type: module');"
            fi

            cd "$APPDIR"
            # Start/Restart: ecosystem -> server.js -> dist/server.js -> npm start
            pm2 delete goqik >/dev/null 2>&1 || true
            if compgen -G "ecosystem.config.*" > /dev/null; then
              pm2 start ecosystem.config.* --only goqik 2>/dev/null || true
              pm2 restart goqik --update-env || true
            elif [ -f server.js ]; then
              pm2 start server.js --name goqik --update-env
            elif [ -f dist/server.js ]; then
              pm2 start dist/server.js --name goqik --update-env
            elif npm run -s | grep -q '^  start'; then
              pm2 start "npm" --name goqik -- start
            else
              echo "[!] 未找到入口（ecosystem.* / server.js / dist/server.js / npm start）"; exit 3
            fi
            pm2 save || true

            # Health check: /readyz -> /
            for i in {1..30}; do
              if curl -fsS "http://127.0.0.1:${PORT}/readyz" >/dev/null \
                 || curl -fsS -o /dev/null -I "http://127.0.0.1:${PORT}/"; then
                echo "READY"; exit 0
              fi
              sleep 2
            done
            echo "[!] Backend not ready; pm2 logs tail ↓"
            pm2 logs --lines 150 goqik
            exit 1

  rollback-placeholder:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: failure()
    env:
      APP_DIR: /root/goqik
      PORT: 8080
      NODE_VERSION: 18
    steps:
      - name: Roll back to placeholder
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          script: |
            set -euo pipefail
            APPDIR="${APP_DIR}"
            mkdir -p "$APPDIR"; cd "$APPDIR"
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - && apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              npm i -g pm2
            fi
            pm2 delete goqik >/dev/null 2>&1 || true
            PORT=${PORT} pm2 start node --name goqik -- -e '
              const http=require("http");
              const p=process.env.PORT||8080;
              const html="<!doctype html><meta charset=utf-8><title>GoQik</title><style>body{font-family:sans-serif;margin:2rem}</style><h1>GoQik v0.993 Placeholder</h1><p>Backend is up on port "+p+". Replace with real app when ready.</p >";
              http.createServer((req,res)=>{
                if(req.url==="/readyz"){res.writeHead(200,{"Content-Type":"application/json"});res.end(JSON.stringify({ok:true,app:"GoQik placeholder"}));return;}
                if(req.url.startsWith("/ui")||req.url.startsWith("/admin-shadow")||req.url==="/"){
                  res.writeHead(200,{"Content-Type":"text/html; charset=utf-8"});res.end(html);return;
                }
                res.writeHead(404);res.end("Not found");
              }).listen(p,"0.0.0.0",()=>console.log("placeholder listening",p));
            '
            pm2 save || true
            for i in {1..20}; do
              curl -fsS "http://127.0.0.1:${PORT}/readyz" && echo "PLACEHOLDER READY" && exit 0 || sleep 2
            done
            echo "[!] placeholder failed"; pm2 logs --lines 120 goqik; exit 1
